Explanation of vulnerability:

The CVE 2020 - 6418 has been identfied and a patch version "  80.0.3987.122 " has been released to mitigate the vulnerability. Google does not provide the bug details due to secuirty concerns.

Different Optimizations in V8 :
V8 engine uses different optimizations for storing the arrays. The V8 engine keeps track of each array and its contents. These help the v8 to optimize operations on the array for a specific type of element.

Javascript cannot differentiate among integers , doubles or floats. They are all recognised as numbers . At engine level more precise distinctions are made. 

> V8 provides elements to each array.

For example :
const array = [1,2,3];

From Javascript perspective the above code is considered as numbers but in V8 terms the element kind of array is PACKED_SMI_ElEMENTS where SMI is known as SMALL Integers.

> The elements are not static and can be changed during the runtime.
> The transition of elements can only take place from specific kind to more general kind.

For Example :

We can transition from PACKED_SMI_ElEMENTS > PACKED_ElEMENTS but we cannot transition from PACKED_SMI_ElEMENTS > PACKED_DOUBLES_ElEMENTS

These elemets are stored in memory as Contagious array.

> Code to understand type confusion :

Reduction JSCallReducer::ReduceArrayMap(Node* node,
const SharedFunctionInfoRef&amp; shared) {
Node* original_length = effect = graph()-&gt;NewNode(
simplified()-&gt;LoadField(AccessBuilder::ForJSArrayLength(kind)), receiver,
effect, control);

+ original_length = effect = graph()-&gt;NewNode(
+ simplified()-&gt;CheckBounds(p.feedback()), original_length,
+ jsgraph()-&gt;Constant(JSArray::kMaxFastArrayLength), effect, control);


Node* a = control = effect = graph()-&gt;NewNode(
javascript()-&gt;CreateArray(1, MaybeHandle()),
array_constructor, array_constructor, original_length, context,
outer_frame_state, effect, control);

> From the above code we are just making sure that the array ( kMaxFastArrayLength ) is =< the given array size 
> If the above condition is satisfied , then a new " createarray() " is created
> If the given array size exceeds kMaxFastArrayLength , create array () wil return dictionary element kind which are basically hash tables.
> However by feeding the hash table to right feedback , turbo fan will generate optimise code for the contagious array ( Turbo Fan optimization used in V8 engine ) 
> The dictionaly and contagious element kinds have significantly different storage mechanism which leads to memory corruption.
> From this process we will be having a corrupted array which can be used to modify a backing store pointer of a typed array this allows arbitary read/write.
> We need to perform the arbitary code execution by creating a RWX page by a Web Assembly , find the memory and place the payload.

